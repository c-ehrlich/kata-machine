{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "id": "hOs21mdDXFJmhLLUOSHvW",
      "type": "text",
      "x": 269.8241882324219,
      "y": 162.97525024414062,
      "width": 391.35968017578125,
      "height": 275,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 836601373,
      "version": 417,
      "versionNonce": 1965015827,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1701608306942,
      "link": null,
      "locked": false,
      "text": "Array vs Linked List\n- Usability\n  - array has index access\n  - array is easy to understand\n  - array lacks insert, delete, etc\n  - linked list has a lot of convenience\n- Time\n  - arrays: O(1) on the things it can do\n  - linked list: traversal is O(N) etc\n- Space\n  - array: need to allocate up front",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 268,
      "containerId": null,
      "originalText": "Array vs Linked List\n- Usability\n  - array has index access\n  - array is easy to understand\n  - array lacks insert, delete, etc\n  - linked list has a lot of convenience\n- Time\n  - arrays: O(1) on the things it can do\n  - linked list: traversal is O(N) etc\n- Space\n  - array: need to allocate up front",
      "lineHeight": 1.25
    },
    {
      "id": "ZtvU2AwpWIq-O0gzacjBA",
      "type": "text",
      "x": 269.93487548828125,
      "y": 480.17578125,
      "width": 370.6596374511719,
      "height": 25,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 360864339,
      "version": 38,
      "versionNonce": 41310781,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1701608605934,
      "link": null,
      "locked": false,
      "text": "ArrayList combines properties of both",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 18,
      "containerId": null,
      "originalText": "ArrayList combines properties of both",
      "lineHeight": 1.25
    },
    {
      "id": "D5QsHgs9Xu9F4eRVJSUGz",
      "type": "text",
      "x": 272.8320007324219,
      "y": 528.4375,
      "width": 645.3795166015625,
      "height": 575,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 972277597,
      "version": 586,
      "versionNonce": 2067753939,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1701610000768,
      "link": null,
      "locked": false,
      "text": "[2, _, _ ]\n0         2\n1 item inside, but capacity 3\nget(idx)\n  if (idx >= len) throw;\npush(val)\n  if (len < capacity)\n  arr[len] = val\n  len++\npop(): T | undefined\n  len--\n  return arr[len]\n\npush when we exceed capacity\n- create a new, longer array (double or whatever)\n- memcpy the first array into the new one\n- can push\ncould also decrease capacity when removing, but this is uncommon\n\nArrayList enqueue/dequeue\nneed to move each item over\nthis is expensive\n",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 568,
      "containerId": null,
      "originalText": "[2, _, _ ]\n0         2\n1 item inside, but capacity 3\nget(idx)\n  if (idx >= len) throw;\npush(val)\n  if (len < capacity)\n  arr[len] = val\n  len++\npop(): T | undefined\n  len--\n  return arr[len]\n\npush when we exceed capacity\n- create a new, longer array (double or whatever)\n- memcpy the first array into the new one\n- can push\ncould also decrease capacity when removing, but this is uncommon\n\nArrayList enqueue/dequeue\nneed to move each item over\nthis is expensive\n",
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}